// Code generated by mockery v2.50.4. DO NOT EDIT.

package client_mock

import (
	context "context"

	githubv4 "github.com/shurcooL/githubv4"
	mock "github.com/stretchr/testify/mock"
)

// MockQueryService is an autogenerated mock type for the QueryService type
type MockQueryService struct {
	mock.Mock
}

type MockQueryService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockQueryService) EXPECT() *MockQueryService_Expecter {
	return &MockQueryService_Expecter{mock: &_m.Mock}
}

// Mutate provides a mock function with given fields: ctx, m, input, variables
func (_m *MockQueryService) Mutate(ctx context.Context, m interface{}, input githubv4.Input, variables map[string]interface{}) error {
	ret := _m.Called(ctx, m, input, variables)

	if len(ret) == 0 {
		panic("no return value specified for Mutate")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, githubv4.Input, map[string]interface{}) error); ok {
		r0 = rf(ctx, m, input, variables)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockQueryService_Mutate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Mutate'
type MockQueryService_Mutate_Call struct {
	*mock.Call
}

// Mutate is a helper method to define mock.On call
//   - ctx context.Context
//   - m interface{}
//   - input githubv4.Input
//   - variables map[string]interface{}
func (_e *MockQueryService_Expecter) Mutate(ctx interface{}, m interface{}, input interface{}, variables interface{}) *MockQueryService_Mutate_Call {
	return &MockQueryService_Mutate_Call{Call: _e.mock.On("Mutate", ctx, m, input, variables)}
}

func (_c *MockQueryService_Mutate_Call) Run(run func(ctx context.Context, m interface{}, input githubv4.Input, variables map[string]interface{})) *MockQueryService_Mutate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(interface{}), args[2].(githubv4.Input), args[3].(map[string]interface{}))
	})
	return _c
}

func (_c *MockQueryService_Mutate_Call) Return(_a0 error) *MockQueryService_Mutate_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockQueryService_Mutate_Call) RunAndReturn(run func(context.Context, interface{}, githubv4.Input, map[string]interface{}) error) *MockQueryService_Mutate_Call {
	_c.Call.Return(run)
	return _c
}

// Query provides a mock function with given fields: ctx, q, variables
func (_m *MockQueryService) Query(ctx context.Context, q interface{}, variables map[string]interface{}) error {
	ret := _m.Called(ctx, q, variables)

	if len(ret) == 0 {
		panic("no return value specified for Query")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, map[string]interface{}) error); ok {
		r0 = rf(ctx, q, variables)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockQueryService_Query_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Query'
type MockQueryService_Query_Call struct {
	*mock.Call
}

// Query is a helper method to define mock.On call
//   - ctx context.Context
//   - q interface{}
//   - variables map[string]interface{}
func (_e *MockQueryService_Expecter) Query(ctx interface{}, q interface{}, variables interface{}) *MockQueryService_Query_Call {
	return &MockQueryService_Query_Call{Call: _e.mock.On("Query", ctx, q, variables)}
}

func (_c *MockQueryService_Query_Call) Run(run func(ctx context.Context, q interface{}, variables map[string]interface{})) *MockQueryService_Query_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(interface{}), args[2].(map[string]interface{}))
	})
	return _c
}

func (_c *MockQueryService_Query_Call) Return(_a0 error) *MockQueryService_Query_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockQueryService_Query_Call) RunAndReturn(run func(context.Context, interface{}, map[string]interface{}) error) *MockQueryService_Query_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockQueryService creates a new instance of MockQueryService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockQueryService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockQueryService {
	mock := &MockQueryService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
