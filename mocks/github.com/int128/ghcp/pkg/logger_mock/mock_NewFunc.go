// Code generated by mockery v2.50.0. DO NOT EDIT.

package logger_mock

import (
	logger "github.com/int128/ghcp/pkg/logger"
	mock "github.com/stretchr/testify/mock"
)

// MockNewFunc is an autogenerated mock type for the NewFunc type
type MockNewFunc struct {
	mock.Mock
}

type MockNewFunc_Expecter struct {
	mock *mock.Mock
}

func (_m *MockNewFunc) EXPECT() *MockNewFunc_Expecter {
	return &MockNewFunc_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: _a0
func (_m *MockNewFunc) Execute(_a0 logger.Option) logger.Interface {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 logger.Interface
	if rf, ok := ret.Get(0).(func(logger.Option) logger.Interface); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(logger.Interface)
		}
	}

	return r0
}

// MockNewFunc_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type MockNewFunc_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - _a0 logger.Option
func (_e *MockNewFunc_Expecter) Execute(_a0 interface{}) *MockNewFunc_Execute_Call {
	return &MockNewFunc_Execute_Call{Call: _e.mock.On("Execute", _a0)}
}

func (_c *MockNewFunc_Execute_Call) Run(run func(_a0 logger.Option)) *MockNewFunc_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(logger.Option))
	})
	return _c
}

func (_c *MockNewFunc_Execute_Call) Return(_a0 logger.Interface) *MockNewFunc_Execute_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockNewFunc_Execute_Call) RunAndReturn(run func(logger.Option) logger.Interface) *MockNewFunc_Execute_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockNewFunc creates a new instance of MockNewFunc. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockNewFunc(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockNewFunc {
	mock := &MockNewFunc{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
