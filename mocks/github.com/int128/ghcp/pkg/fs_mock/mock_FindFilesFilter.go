// Code generated by mockery v2.49.0. DO NOT EDIT.

package fs_mock

import mock "github.com/stretchr/testify/mock"

// MockFindFilesFilter is an autogenerated mock type for the FindFilesFilter type
type MockFindFilesFilter struct {
	mock.Mock
}

type MockFindFilesFilter_Expecter struct {
	mock *mock.Mock
}

func (_m *MockFindFilesFilter) EXPECT() *MockFindFilesFilter_Expecter {
	return &MockFindFilesFilter_Expecter{mock: &_m.Mock}
}

// ExcludeFile provides a mock function with given fields: path
func (_m *MockFindFilesFilter) ExcludeFile(path string) bool {
	ret := _m.Called(path)

	if len(ret) == 0 {
		panic("no return value specified for ExcludeFile")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(path)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockFindFilesFilter_ExcludeFile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExcludeFile'
type MockFindFilesFilter_ExcludeFile_Call struct {
	*mock.Call
}

// ExcludeFile is a helper method to define mock.On call
//   - path string
func (_e *MockFindFilesFilter_Expecter) ExcludeFile(path interface{}) *MockFindFilesFilter_ExcludeFile_Call {
	return &MockFindFilesFilter_ExcludeFile_Call{Call: _e.mock.On("ExcludeFile", path)}
}

func (_c *MockFindFilesFilter_ExcludeFile_Call) Run(run func(path string)) *MockFindFilesFilter_ExcludeFile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockFindFilesFilter_ExcludeFile_Call) Return(_a0 bool) *MockFindFilesFilter_ExcludeFile_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockFindFilesFilter_ExcludeFile_Call) RunAndReturn(run func(string) bool) *MockFindFilesFilter_ExcludeFile_Call {
	_c.Call.Return(run)
	return _c
}

// SkipDir provides a mock function with given fields: path
func (_m *MockFindFilesFilter) SkipDir(path string) bool {
	ret := _m.Called(path)

	if len(ret) == 0 {
		panic("no return value specified for SkipDir")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(path)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockFindFilesFilter_SkipDir_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SkipDir'
type MockFindFilesFilter_SkipDir_Call struct {
	*mock.Call
}

// SkipDir is a helper method to define mock.On call
//   - path string
func (_e *MockFindFilesFilter_Expecter) SkipDir(path interface{}) *MockFindFilesFilter_SkipDir_Call {
	return &MockFindFilesFilter_SkipDir_Call{Call: _e.mock.On("SkipDir", path)}
}

func (_c *MockFindFilesFilter_SkipDir_Call) Run(run func(path string)) *MockFindFilesFilter_SkipDir_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockFindFilesFilter_SkipDir_Call) Return(_a0 bool) *MockFindFilesFilter_SkipDir_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockFindFilesFilter_SkipDir_Call) RunAndReturn(run func(string) bool) *MockFindFilesFilter_SkipDir_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockFindFilesFilter creates a new instance of MockFindFilesFilter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockFindFilesFilter(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockFindFilesFilter {
	mock := &MockFindFilesFilter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
