// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package fs_mock

import (
	"github.com/int128/ghcp/pkg/fs"
	mock "github.com/stretchr/testify/mock"
)

// NewMockInterface creates a new instance of MockInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockInterface {
	mock := &MockInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockInterface is an autogenerated mock type for the Interface type
type MockInterface struct {
	mock.Mock
}

type MockInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockInterface) EXPECT() *MockInterface_Expecter {
	return &MockInterface_Expecter{mock: &_m.Mock}
}

// FindFiles provides a mock function for the type MockInterface
func (_mock *MockInterface) FindFiles(paths []string, filter fs.FindFilesFilter) ([]fs.File, error) {
	ret := _mock.Called(paths, filter)

	if len(ret) == 0 {
		panic("no return value specified for FindFiles")
	}

	var r0 []fs.File
	var r1 error
	if returnFunc, ok := ret.Get(0).(func([]string, fs.FindFilesFilter) ([]fs.File, error)); ok {
		return returnFunc(paths, filter)
	}
	if returnFunc, ok := ret.Get(0).(func([]string, fs.FindFilesFilter) []fs.File); ok {
		r0 = returnFunc(paths, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]fs.File)
		}
	}
	if returnFunc, ok := ret.Get(1).(func([]string, fs.FindFilesFilter) error); ok {
		r1 = returnFunc(paths, filter)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockInterface_FindFiles_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindFiles'
type MockInterface_FindFiles_Call struct {
	*mock.Call
}

// FindFiles is a helper method to define mock.On call
//   - paths []string
//   - filter fs.FindFilesFilter
func (_e *MockInterface_Expecter) FindFiles(paths interface{}, filter interface{}) *MockInterface_FindFiles_Call {
	return &MockInterface_FindFiles_Call{Call: _e.mock.On("FindFiles", paths, filter)}
}

func (_c *MockInterface_FindFiles_Call) Run(run func(paths []string, filter fs.FindFilesFilter)) *MockInterface_FindFiles_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 []string
		if args[0] != nil {
			arg0 = args[0].([]string)
		}
		var arg1 fs.FindFilesFilter
		if args[1] != nil {
			arg1 = args[1].(fs.FindFilesFilter)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockInterface_FindFiles_Call) Return(files []fs.File, err error) *MockInterface_FindFiles_Call {
	_c.Call.Return(files, err)
	return _c
}

func (_c *MockInterface_FindFiles_Call) RunAndReturn(run func(paths []string, filter fs.FindFilesFilter) ([]fs.File, error)) *MockInterface_FindFiles_Call {
	_c.Call.Return(run)
	return _c
}

// ReadAsBase64EncodedContent provides a mock function for the type MockInterface
func (_mock *MockInterface) ReadAsBase64EncodedContent(filename string) (string, error) {
	ret := _mock.Called(filename)

	if len(ret) == 0 {
		panic("no return value specified for ReadAsBase64EncodedContent")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (string, error)); ok {
		return returnFunc(filename)
	}
	if returnFunc, ok := ret.Get(0).(func(string) string); ok {
		r0 = returnFunc(filename)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(filename)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockInterface_ReadAsBase64EncodedContent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReadAsBase64EncodedContent'
type MockInterface_ReadAsBase64EncodedContent_Call struct {
	*mock.Call
}

// ReadAsBase64EncodedContent is a helper method to define mock.On call
//   - filename string
func (_e *MockInterface_Expecter) ReadAsBase64EncodedContent(filename interface{}) *MockInterface_ReadAsBase64EncodedContent_Call {
	return &MockInterface_ReadAsBase64EncodedContent_Call{Call: _e.mock.On("ReadAsBase64EncodedContent", filename)}
}

func (_c *MockInterface_ReadAsBase64EncodedContent_Call) Run(run func(filename string)) *MockInterface_ReadAsBase64EncodedContent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockInterface_ReadAsBase64EncodedContent_Call) Return(s string, err error) *MockInterface_ReadAsBase64EncodedContent_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockInterface_ReadAsBase64EncodedContent_Call) RunAndReturn(run func(filename string) (string, error)) *MockInterface_ReadAsBase64EncodedContent_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockFindFilesFilter creates a new instance of MockFindFilesFilter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockFindFilesFilter(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockFindFilesFilter {
	mock := &MockFindFilesFilter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockFindFilesFilter is an autogenerated mock type for the FindFilesFilter type
type MockFindFilesFilter struct {
	mock.Mock
}

type MockFindFilesFilter_Expecter struct {
	mock *mock.Mock
}

func (_m *MockFindFilesFilter) EXPECT() *MockFindFilesFilter_Expecter {
	return &MockFindFilesFilter_Expecter{mock: &_m.Mock}
}

// ExcludeFile provides a mock function for the type MockFindFilesFilter
func (_mock *MockFindFilesFilter) ExcludeFile(path string) bool {
	ret := _mock.Called(path)

	if len(ret) == 0 {
		panic("no return value specified for ExcludeFile")
	}

	var r0 bool
	if returnFunc, ok := ret.Get(0).(func(string) bool); ok {
		r0 = returnFunc(path)
	} else {
		r0 = ret.Get(0).(bool)
	}
	return r0
}

// MockFindFilesFilter_ExcludeFile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExcludeFile'
type MockFindFilesFilter_ExcludeFile_Call struct {
	*mock.Call
}

// ExcludeFile is a helper method to define mock.On call
//   - path string
func (_e *MockFindFilesFilter_Expecter) ExcludeFile(path interface{}) *MockFindFilesFilter_ExcludeFile_Call {
	return &MockFindFilesFilter_ExcludeFile_Call{Call: _e.mock.On("ExcludeFile", path)}
}

func (_c *MockFindFilesFilter_ExcludeFile_Call) Run(run func(path string)) *MockFindFilesFilter_ExcludeFile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockFindFilesFilter_ExcludeFile_Call) Return(b bool) *MockFindFilesFilter_ExcludeFile_Call {
	_c.Call.Return(b)
	return _c
}

func (_c *MockFindFilesFilter_ExcludeFile_Call) RunAndReturn(run func(path string) bool) *MockFindFilesFilter_ExcludeFile_Call {
	_c.Call.Return(run)
	return _c
}

// SkipDir provides a mock function for the type MockFindFilesFilter
func (_mock *MockFindFilesFilter) SkipDir(path string) bool {
	ret := _mock.Called(path)

	if len(ret) == 0 {
		panic("no return value specified for SkipDir")
	}

	var r0 bool
	if returnFunc, ok := ret.Get(0).(func(string) bool); ok {
		r0 = returnFunc(path)
	} else {
		r0 = ret.Get(0).(bool)
	}
	return r0
}

// MockFindFilesFilter_SkipDir_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SkipDir'
type MockFindFilesFilter_SkipDir_Call struct {
	*mock.Call
}

// SkipDir is a helper method to define mock.On call
//   - path string
func (_e *MockFindFilesFilter_Expecter) SkipDir(path interface{}) *MockFindFilesFilter_SkipDir_Call {
	return &MockFindFilesFilter_SkipDir_Call{Call: _e.mock.On("SkipDir", path)}
}

func (_c *MockFindFilesFilter_SkipDir_Call) Run(run func(path string)) *MockFindFilesFilter_SkipDir_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockFindFilesFilter_SkipDir_Call) Return(b bool) *MockFindFilesFilter_SkipDir_Call {
	_c.Call.Return(b)
	return _c
}

func (_c *MockFindFilesFilter_SkipDir_Call) RunAndReturn(run func(path string) bool) *MockFindFilesFilter_SkipDir_Call {
	_c.Call.Return(run)
	return _c
}
