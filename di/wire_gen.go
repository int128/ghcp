// Code generated by Wire. DO NOT EDIT.

//go:generate wire
//+build !wireinject

package di

import (
	"github.com/int128/ghcp/adaptors/cmd"
	"github.com/int128/ghcp/adaptors/env"
	"github.com/int128/ghcp/adaptors/fs"
	github2 "github.com/int128/ghcp/adaptors/github"
	"github.com/int128/ghcp/adaptors/logger"
	"github.com/int128/ghcp/infrastructure/github"
	"github.com/int128/ghcp/usecases/commit"
	"github.com/int128/ghcp/usecases/forkcommit"
	"github.com/int128/ghcp/usecases/gitobject"
	"github.com/int128/ghcp/usecases/pullrequest"
	"github.com/int128/ghcp/usecases/release"
)

// Injectors from di.go:

func NewCmd() cmd.Interface {
	envEnv := &env.Env{}
	newFunc := _wireNewFuncValue
	githubNewFunc := _wireGithubNewFuncValue
	newInternalRunnerFunc := _wireNewInternalRunnerFuncValue
	runner := &cmd.Runner{
		Env:               envEnv,
		NewLogger:         newFunc,
		NewGitHub:         githubNewFunc,
		NewInternalRunner: newInternalRunnerFunc,
	}
	return runner
}

var (
	_wireNewFuncValue               = logger.NewFunc(logger.New)
	_wireGithubNewFuncValue         = github.NewFunc(github.New)
	_wireNewInternalRunnerFuncValue = cmd.NewInternalRunnerFunc(NewCmdInternalRunner)
)

func NewCmdInternalRunner(loggerInterface logger.Interface, githubInterface github.Interface) *cmd.InternalRunner {
	fileSystem := &fs.FileSystem{}
	gitHub := &github2.GitHub{
		Client: githubInterface,
		Logger: loggerInterface,
	}
	createGitObject := &gitobject.CreateGitObject{
		FileSystem: fileSystem,
		Logger:     loggerInterface,
		GitHub:     gitHub,
	}
	commitCommit := &commit.Commit{
		CreateGitObject: createGitObject,
		FileSystem:      fileSystem,
		Logger:          loggerInterface,
		GitHub:          gitHub,
	}
	forkCommit := &forkcommit.ForkCommit{
		Commit: commitCommit,
		Logger: loggerInterface,
		GitHub: gitHub,
	}
	pullRequest := &pullrequest.PullRequest{
		GitHub: gitHub,
		Logger: loggerInterface,
	}
	releaseRelease := &release.Release{
		FileSystem: fileSystem,
		Logger:     loggerInterface,
		GitHub:     gitHub,
	}
	internalRunner := &cmd.InternalRunner{
		CommitUseCase:      commitCommit,
		ForkCommitUseCase:  forkCommit,
		PullRequestUseCase: pullRequest,
		ReleaseUseCase:     releaseRelease,
		Logger:             loggerInterface,
	}
	return internalRunner
}
