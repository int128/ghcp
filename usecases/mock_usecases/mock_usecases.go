// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/int128/ghcp/usecases (interfaces: UpdateBranch,CreateBranch,Commit)

// Package mock_usecases is a generated GoMock package.
package mock_usecases

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	usecases "github.com/int128/ghcp/usecases"
	reflect "reflect"
)

// MockUpdateBranch is a mock of UpdateBranch interface
type MockUpdateBranch struct {
	ctrl     *gomock.Controller
	recorder *MockUpdateBranchMockRecorder
}

// MockUpdateBranchMockRecorder is the mock recorder for MockUpdateBranch
type MockUpdateBranchMockRecorder struct {
	mock *MockUpdateBranch
}

// NewMockUpdateBranch creates a new mock instance
func NewMockUpdateBranch(ctrl *gomock.Controller) *MockUpdateBranch {
	mock := &MockUpdateBranch{ctrl: ctrl}
	mock.recorder = &MockUpdateBranchMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUpdateBranch) EXPECT() *MockUpdateBranchMockRecorder {
	return m.recorder
}

// Do mocks base method
func (m *MockUpdateBranch) Do(arg0 context.Context, arg1 usecases.UpdateBranchIn) error {
	ret := m.ctrl.Call(m, "Do", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Do indicates an expected call of Do
func (mr *MockUpdateBranchMockRecorder) Do(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do", reflect.TypeOf((*MockUpdateBranch)(nil).Do), arg0, arg1)
}

// MockCreateBranch is a mock of CreateBranch interface
type MockCreateBranch struct {
	ctrl     *gomock.Controller
	recorder *MockCreateBranchMockRecorder
}

// MockCreateBranchMockRecorder is the mock recorder for MockCreateBranch
type MockCreateBranchMockRecorder struct {
	mock *MockCreateBranch
}

// NewMockCreateBranch creates a new mock instance
func NewMockCreateBranch(ctrl *gomock.Controller) *MockCreateBranch {
	mock := &MockCreateBranch{ctrl: ctrl}
	mock.recorder = &MockCreateBranchMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCreateBranch) EXPECT() *MockCreateBranchMockRecorder {
	return m.recorder
}

// Do mocks base method
func (m *MockCreateBranch) Do(arg0 context.Context, arg1 usecases.CreateBranchIn) error {
	ret := m.ctrl.Call(m, "Do", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Do indicates an expected call of Do
func (mr *MockCreateBranchMockRecorder) Do(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do", reflect.TypeOf((*MockCreateBranch)(nil).Do), arg0, arg1)
}

// MockCommit is a mock of Commit interface
type MockCommit struct {
	ctrl     *gomock.Controller
	recorder *MockCommitMockRecorder
}

// MockCommitMockRecorder is the mock recorder for MockCommit
type MockCommitMockRecorder struct {
	mock *MockCommit
}

// NewMockCommit creates a new mock instance
func NewMockCommit(ctrl *gomock.Controller) *MockCommit {
	mock := &MockCommit{ctrl: ctrl}
	mock.recorder = &MockCommitMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCommit) EXPECT() *MockCommitMockRecorder {
	return m.recorder
}

// Do mocks base method
func (m *MockCommit) Do(arg0 context.Context, arg1 usecases.CommitIn) (*usecases.CommitOut, error) {
	ret := m.ctrl.Call(m, "Do", arg0, arg1)
	ret0, _ := ret[0].(*usecases.CommitOut)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Do indicates an expected call of Do
func (mr *MockCommitMockRecorder) Do(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do", reflect.TypeOf((*MockCommit)(nil).Do), arg0, arg1)
}
