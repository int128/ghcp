// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/int128/ghcp/usecases (interfaces: Commit,CommitToFork,CreateBlobTreeCommit)

// Package mock_usecases is a generated GoMock package.
package mock_usecases

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	usecases "github.com/int128/ghcp/usecases"
	reflect "reflect"
)

// MockCommit is a mock of Commit interface
type MockCommit struct {
	ctrl     *gomock.Controller
	recorder *MockCommitMockRecorder
}

// MockCommitMockRecorder is the mock recorder for MockCommit
type MockCommitMockRecorder struct {
	mock *MockCommit
}

// NewMockCommit creates a new mock instance
func NewMockCommit(ctrl *gomock.Controller) *MockCommit {
	mock := &MockCommit{ctrl: ctrl}
	mock.recorder = &MockCommitMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCommit) EXPECT() *MockCommitMockRecorder {
	return m.recorder
}

// Do mocks base method
func (m *MockCommit) Do(arg0 context.Context, arg1 usecases.CommitIn) error {
	ret := m.ctrl.Call(m, "Do", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Do indicates an expected call of Do
func (mr *MockCommitMockRecorder) Do(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do", reflect.TypeOf((*MockCommit)(nil).Do), arg0, arg1)
}

// MockCommitToFork is a mock of CommitToFork interface
type MockCommitToFork struct {
	ctrl     *gomock.Controller
	recorder *MockCommitToForkMockRecorder
}

// MockCommitToForkMockRecorder is the mock recorder for MockCommitToFork
type MockCommitToForkMockRecorder struct {
	mock *MockCommitToFork
}

// NewMockCommitToFork creates a new mock instance
func NewMockCommitToFork(ctrl *gomock.Controller) *MockCommitToFork {
	mock := &MockCommitToFork{ctrl: ctrl}
	mock.recorder = &MockCommitToForkMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCommitToFork) EXPECT() *MockCommitToForkMockRecorder {
	return m.recorder
}

// Do mocks base method
func (m *MockCommitToFork) Do(arg0 context.Context, arg1 usecases.CommitToForkIn) error {
	ret := m.ctrl.Call(m, "Do", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Do indicates an expected call of Do
func (mr *MockCommitToForkMockRecorder) Do(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do", reflect.TypeOf((*MockCommitToFork)(nil).Do), arg0, arg1)
}

// MockCreateBlobTreeCommit is a mock of CreateBlobTreeCommit interface
type MockCreateBlobTreeCommit struct {
	ctrl     *gomock.Controller
	recorder *MockCreateBlobTreeCommitMockRecorder
}

// MockCreateBlobTreeCommitMockRecorder is the mock recorder for MockCreateBlobTreeCommit
type MockCreateBlobTreeCommitMockRecorder struct {
	mock *MockCreateBlobTreeCommit
}

// NewMockCreateBlobTreeCommit creates a new mock instance
func NewMockCreateBlobTreeCommit(ctrl *gomock.Controller) *MockCreateBlobTreeCommit {
	mock := &MockCreateBlobTreeCommit{ctrl: ctrl}
	mock.recorder = &MockCreateBlobTreeCommitMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCreateBlobTreeCommit) EXPECT() *MockCreateBlobTreeCommitMockRecorder {
	return m.recorder
}

// Do mocks base method
func (m *MockCreateBlobTreeCommit) Do(arg0 context.Context, arg1 usecases.CreateBlobTreeCommitIn) (*usecases.CreateBlobTreeCommitOut, error) {
	ret := m.ctrl.Call(m, "Do", arg0, arg1)
	ret0, _ := ret[0].(*usecases.CreateBlobTreeCommitOut)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Do indicates an expected call of Do
func (mr *MockCreateBlobTreeCommitMockRecorder) Do(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do", reflect.TypeOf((*MockCreateBlobTreeCommit)(nil).Do), arg0, arg1)
}
