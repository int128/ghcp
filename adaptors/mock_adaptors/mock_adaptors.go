// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/int128/ghcp/adaptors/interfaces (interfaces: GitHub)

// Package mock_adaptors is a generated GoMock package.
package mock_adaptors

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	interfaces "github.com/int128/ghcp/adaptors/interfaces"
	reflect "reflect"
)

// MockGitHub is a mock of GitHub interface
type MockGitHub struct {
	ctrl     *gomock.Controller
	recorder *MockGitHubMockRecorder
}

// MockGitHubMockRecorder is the mock recorder for MockGitHub
type MockGitHubMockRecorder struct {
	mock *MockGitHub
}

// NewMockGitHub creates a new mock instance
func NewMockGitHub(ctrl *gomock.Controller) *MockGitHub {
	mock := &MockGitHub{ctrl: ctrl}
	mock.recorder = &MockGitHubMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockGitHub) EXPECT() *MockGitHubMockRecorder {
	return m.recorder
}

// GetRepository mocks base method
func (m *MockGitHub) GetRepository(arg0 context.Context, arg1 interfaces.GetRepositoryIn) (*interfaces.GetRepositoryOut, error) {
	ret := m.ctrl.Call(m, "GetRepository", arg0, arg1)
	ret0, _ := ret[0].(*interfaces.GetRepositoryOut)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRepository indicates an expected call of GetRepository
func (mr *MockGitHubMockRecorder) GetRepository(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRepository", reflect.TypeOf((*MockGitHub)(nil).GetRepository), arg0, arg1)
}
